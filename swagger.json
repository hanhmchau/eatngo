{
  "swagger": "2.0",
  "info": {
    "description": "Eat&Go application's API documentation.",
    "version": "1.0.0",
    "title": "Swagger Eat&Go",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "petstore.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "brand",
      "description": "Operations about brands"
    },
    {
      "name": "store",
      "description": "Operations about stores"
    },
    {
      "name": "food",
      "description": "Operations about foods"
    },
    {
      "name": "member",
      "description": "Operations about members"
    },
    {
      "name": "order",
      "description": "Operations about orders"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/brands": {
      "post": {
        "tags": [
          "brand"
        ],
        "summary": "Add a new brand",
        "description": "",
        "operationId": "addBrand",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Brand object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Get brands",
        "description": "Get brands",
        "operationId": "find Brands",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Whether to load only active brands",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Brand"
              }
            }
          }
        }
      }
    },
    "/brands/{brandId}": {
      "put": {
        "tags": [
          "brand"
        ],
        "summary": "Update an existing brand",
        "description": "",
        "operationId": "updateBrand",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "Brand id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Brand object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Find brand by ID",
        "description": "Returns a single brand",
        "operationId": "getBrandById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "ID of brand to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      },
      "delete": {
        "tags": [
          "brand"
        ],
        "summary": "Deletes a brand",
        "description": "",
        "operationId": "deleteBrand",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "Brand id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/brands/{brandId}/foods": {
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Get foods by brand",
        "description": "",
        "operationId": "getFoodByBrands",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "Brand id to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Food"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/brands/{brandId}/stores": {
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Get stores by brand",
        "description": "",
        "operationId": "getStoresyBrands",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "Brand id to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Store"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/brands/{brandId}/orders": {
      "get": {
        "tags": [
          "brand"
        ],
        "summary": "Get orders by brand",
        "description": "",
        "operationId": "getOrdersByBrand",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "Brand id to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/stores": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Add a new store",
        "description": "",
        "operationId": "addStore",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Store object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success operation"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get stores",
        "description": "Get stores",
        "operationId": "findStores",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Whether to load only active stores",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Store"
              }
            }
          }
        }
      }
    },
    "/stores/{storeId}": {
      "put": {
        "tags": [
          "store"
        ],
        "summary": "Update an existing store",
        "description": "",
        "operationId": "updateStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "Store id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Store object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Store not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find store by ID",
        "description": "Returns a single store",
        "operationId": "getStoreById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "ID of store to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Store not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Deletes a store",
        "description": "",
        "operationId": "deleteStore",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "Store id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Store not found"
          }
        }
      }
    },
    "/stores/{storeId}/orders": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Get orders by store",
        "description": "",
        "operationId": "getOrdersByStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "description": "Store id to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Store not found"
          }
        }
      }
    },
    "/foods": {
      "post": {
        "tags": [
          "food"
        ],
        "summary": "Add a new food",
        "description": "",
        "operationId": "addFood",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Food object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Food"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "food"
        ],
        "summary": "Get foods",
        "description": "Get foods",
        "operationId": "find Foods",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Whether to load only active foods",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Food"
              }
            }
          }
        }
      }
    },
    "/foods/{foodId}": {
      "put": {
        "tags": [
          "food"
        ],
        "summary": "Update an existing food",
        "description": "",
        "operationId": "updateFood",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "foodId",
            "in": "path",
            "description": "Food id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Food object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Food"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Food not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "food"
        ],
        "summary": "Find food by ID",
        "description": "Returns a single food",
        "operationId": "getFoodById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "foodId",
            "in": "path",
            "description": "ID of food to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Food"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Food not found"
          }
        }
      },
      "delete": {
        "tags": [
          "food"
        ],
        "summary": "Deletes a food",
        "description": "",
        "operationId": "deleteFood",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "foodId",
            "in": "path",
            "description": "Food id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Food not found"
          }
        }
      }
    },
    "/foods/{foodId}/images": {
      "post": {
        "tags": [
          "food"
        ],
        "summary": "Add image to food",
        "description": "",
        "operationId": "addImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "foodId",
            "in": "path",
            "description": "Food id to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "image",
            "description": "Link to image",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Image"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Food not found"
          }
        }
      },
      "delete": {
        "tags": [
          "food"
        ],
        "summary": "Delete image from food",
        "description": "",
        "operationId": "deleteImage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "foodId",
            "in": "path",
            "description": "Food id to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "image",
            "description": "Link to image",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Image"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Food not found"
          }
        }
      }
    },
    "/members": {
      "post": {
        "tags": [
          "member"
        ],
        "summary": "Add a new member",
        "description": "",
        "operationId": "addMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Member object that needs to be added",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Member"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get members",
        "description": "Get members",
        "operationId": "find Members",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Whether to load only active members",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Member"
              }
            }
          }
        }
      }
    },
    "/members/{memberId}": {
      "put": {
        "tags": [
          "member"
        ],
        "summary": "Update an existing member",
        "description": "",
        "operationId": "updateMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Member object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Member"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Member not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Find member by ID",
        "description": "Returns a single member",
        "operationId": "getMemberById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "ID of member to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Member"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Member not found"
          }
        }
      },
      "delete": {
        "tags": [
          "member"
        ],
        "summary": "Deletes a member",
        "description": "",
        "operationId": "deleteMember",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Member not found"
          }
        }
      }
    },
    "/members/{memberId}/brands": {
      "get": {
        "tags": [
          "member"
        ],
        "summary": "Get brands by member",
        "description": "",
        "operationId": "getBrandsByMember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "memberId",
            "in": "path",
            "description": "Member id to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Brand"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Brand not found"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Add a new order",
        "description": "",
        "operationId": "addOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get orders",
        "description": "Get orders",
        "operationId": "find Orders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "enabledOnly",
            "in": "query",
            "description": "Whether to load only active orders",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Update an existing order",
        "description": "",
        "operationId": "updateOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Order object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Find order by ID",
        "description": "Returns a single order",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "order"
        ],
        "summary": "Deletes a order",
        "description": "",
        "operationId": "deleteOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Member": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "facebookId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Member"
      }
    },
    "Brand": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "isDisabled": {
          "type": "boolean",
          "default": false
        },
        "stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Store"
          }
        },
        "creator": {
          "$ref": "#/definitions/Member"
        }
      },
      "xml": {
        "name": "Brand"
      }
    },
    "Store": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "openingHour": {
          "type": "string",
          "format": "time"
        },
        "closingHour": {
          "type": "string",
          "format": "time"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "brand": {
          "$ref": "#/definitions/Brand"
        }
      },
      "xml": {
        "name": "Store"
      }
    },
    "OrderDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "food": {
          "$ref": "#/definitions/Food"
        },
        "price": {
          "type": "number"
        },
        "attributes": {
          "type": "object"
        },
        "quantity": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "OrderDetail"
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "store": {
          "$ref": "#/definitions/Store"
        },
        "member": {
          "$ref": "#/definitions/Member"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "attitude": {
          "type": "integer"
        },
        "speed": {
          "type": "integer"
        },
        "service": {
          "type": "integer"
        },
        "recommended": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "description": "Order Status"
        },
        "orderDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderDetail"
          }
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Food": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "brand": {
          "$ref": "#/definitions/Brand"
        },
        "quantity": {
          "type": "integer"
        },
        "attributes": {
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "ingredient": {
          "type": "string"
        },
        "sour": {
          "type": "integer"
        },
        "typeId": {
          "type": "integer"
        },
        "status": {
          "type": "string",
          "description": "Order Status"
        }
      },
      "xml": {
        "name": "Food"
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Image"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}